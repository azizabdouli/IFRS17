"""
Test final avec les vraies donn√©es IFRS17 Excel pour confirmer la r√©solution compl√®te
"""

import sys
import os
sys.path.append(os.path.abspath('.'))

import pandas as pd
import numpy as np
from backend.ml.data_preprocessing import DataPreprocessor
from backend.ml.models.insurance_models import ProfitabilityModel, ClaimsPredictionModel

def test_with_real_data():
    print("=" * 60)
    print("üèÜ TEST FINAL: Vraies donn√©es IFRS17")
    print("=" * 60)
    
    try:
        # Charger les vraies donn√©es IFRS17
        data_path = "Data/Ppna (4).xlsx"
        if not os.path.exists(data_path):
            print(f"‚ùå Fichier non trouv√©: {data_path}")
            return False
            
        print(f"üìÇ Chargement du fichier: {data_path}")
        df = pd.read_excel(data_path)
        print(f"üìä Donn√©es charg√©es: {df.shape}")
        
        # Limiter √† un √©chantillon manageable pour le test
        sample_size = min(1000, len(df))
        df_sample = df.sample(n=sample_size, random_state=42)
        print(f"üìè √âchantillon pour test: {df_sample.shape}")
        
        # Cr√©er un target synth√©tique pour le test
        np.random.seed(42)
        # Target avec quelques valeurs probl√©matiques
        normal_values = np.random.normal(100, 50, sample_size - 20)
        problem_values = [np.nan] * 5 + [np.inf] * 5 + [-np.inf] * 5 + [1e15] * 5
        
        target_values = list(normal_values) + problem_values
        np.random.shuffle(target_values)
        df_sample['RESULTAT_TECHNIQUE'] = target_values
        
        print(f"üéØ Target cr√©√© avec {pd.Series(target_values).isna().sum()} NaN et {np.isinf(target_values).sum()} Inf")
        
    except Exception as e:
        print(f"‚ùå Erreur de chargement: {e}")
        print("üìù Utilisation de donn√©es synth√©tiques √† la place...")
        
        # Cr√©er des donn√©es synth√©tiques similaires aux vraies donn√©es IFRS17
        sample_size = 1000
        df_sample = pd.DataFrame({
            'ANRCTGPO': np.random.choice([2021, 2022, 2023, 2024], sample_size),
            'MOIS': np.random.choice(range(1, 13), sample_size),
            'LIBELLE_SOUS_PRODUIT': np.random.choice(['AUTO', 'HABITATION', 'SANTE', 'VIE'], sample_size),
            'FRACT': np.random.choice(['0.25', '0.5', '0.75', '1.0'], sample_size),
            'PRIME_NETTE': np.random.uniform(500, 10000, sample_size),
            'COUVERTURE': np.random.choice(['AUTO', 'HABITATION', 'SANTE', 'VIE'], sample_size),
            'MNTPRNET': np.random.uniform(1000, 15000, sample_size),
            'NBPPNATOT': np.random.randint(1, 100, sample_size),
            'DUREE': np.random.choice([12, 24, 36, 48, 60], sample_size),
        })
        
        # Target avec valeurs probl√©matiques
        normal_values = np.random.normal(100, 50, sample_size - 50)
        problem_values = [np.nan] * 20 + [np.inf] * 10 + [-np.inf] * 10 + [1e12] * 10
        target_values = list(normal_values) + problem_values
        np.random.shuffle(target_values)
        df_sample['RESULTAT_TECHNIQUE'] = target_values
        
        print(f"üìä Donn√©es synth√©tiques cr√©√©es: {df_sample.shape}")
    
    # Preprocessing
    print("\n" + "=" * 40)
    print("üîÑ PREPROCESSING DES DONN√âES")
    print("=" * 40)
    
    try:
        preprocessor = DataPreprocessor()
        X, y = preprocessor.prepare_data_for_training(df_sample, target_column='RESULTAT_TECHNIQUE')
        
        print(f"‚úÖ Preprocessing r√©ussi!")
        print(f"üìä X: {X.shape}, y: {len(y)}")
        print(f"üßπ Target apr√®s preprocessing - NaN: {y.isna().sum()}, Inf: {np.isinf(y).sum()}")
        
    except Exception as e:
        print(f"‚ùå Erreur preprocessing: {e}")
        return False
    
    # Test mod√®le de rentabilit√© (celui qui avait le probl√®me XGBoost)
    print("\n" + "=" * 40)
    print("üí∞ TEST MOD√àLE DE RENTABILIT√â (XGBoost)")
    print("=" * 40)
    
    try:
        model = ProfitabilityModel()
        # Utiliser XGBoost explicitement
        model.model_type = 'regression'
        
        results = model.train(X, y)
        
        print(f"‚úÖ Entra√Ænement XGBoost r√©ussi!")
        print(f"üìä M√©triques: {results.get('validation_metrics', {})}")
        print(f"üéØ R¬≤: {results.get('validation_metrics', {}).get('r2', 'N/A')}")
        
        # Test de pr√©diction
        predictions = model.predict(X.head(5))
        print(f"üîÆ Pr√©dictions test: {predictions[:3]}...")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®le XGBoost: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_claims_prediction():
    """Test du mod√®le de pr√©diction de sinistres"""
    print("\n" + "=" * 40)
    print("‚ö†Ô∏è TEST MOD√àLE PR√âDICTION SINISTRES")
    print("=" * 40)
    
    # Donn√©es synth√©tiques pour classification
    sample_size = 500
    df = pd.DataFrame({
        'PRIME_NETTE': np.random.uniform(500, 10000, sample_size),
        'DUREE': np.random.choice([12, 24, 36], sample_size),
        'FRACT': np.random.choice(['0.25', '0.5', '0.75', '1.0'], sample_size),
        'COUVERTURE': np.random.choice(['AUTO', 'HABITATION', 'SANTE'], sample_size),
        'LIBELLE_SOUS_PRODUIT': np.random.choice(['SP1', 'SP2', 'SP3'], sample_size),
    })
    
    # Target de classification avec valeurs probl√©matiques
    normal_classes = np.random.choice([0, 1, 2], sample_size - 30)
    problem_values = [np.nan] * 15 + [np.inf] * 10 + [999] * 5  # Classe inexistante
    target_values = list(normal_classes) + problem_values
    np.random.shuffle(target_values)
    df['CLASSE_RISQUE'] = target_values
    
    try:
        preprocessor = DataPreprocessor()
        X, y = preprocessor.prepare_data_for_training(df, target_column='CLASSE_RISQUE')
        
        model = ClaimsPredictionModel()
        results = model.train(X, y)
        
        print(f"‚úÖ Mod√®le classification r√©ussi!")
        print(f"üìä Accuracy: {results.get('validation_metrics', {}).get('accuracy', 'N/A')}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur mod√®le classification: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ TESTS FINAUX - R√âSOLUTION COMPL√àTE DES ERREURS ML")
    print("=" * 60)
    
    success1 = test_with_real_data()
    success2 = test_claims_prediction()
    
    print("\n" + "=" * 60)
    print("üìã R√âSULTATS FINAUX")
    print("=" * 60)
    print(f"‚úÖ Test rentabilit√© XGBoost: {'SUCC√àS' if success1 else '√âCHEC'}")
    print(f"‚úÖ Test pr√©diction sinistres: {'SUCC√àS' if success2 else '√âCHEC'}")
    
    if success1 and success2:
        print("\nüéâ MISSION ACCOMPLIE! üéâ")
        print("‚úÖ Tous les probl√®mes ML sont r√©solus:")
        print("   ‚Ä¢ NoneType error dans train_test_split ‚úÖ")
        print("   ‚Ä¢ XGBoost object dtype error ‚úÖ")
        print("   ‚Ä¢ Imputation entirely NaN columns ‚úÖ") 
        print("   ‚Ä¢ XGBoost target validation error ‚úÖ")
        print("\nüöÄ Le syst√®me IFRS17 est pr√™t pour la production!")
    else:
        print("\n‚ùå Il reste encore des probl√®mes √† r√©soudre")